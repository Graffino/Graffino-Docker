name: Production
run-name: '${{ github.repository }} -> production by ${{ github.actor }}'

on:
  workflow_dispatch:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:
  deploy-production:
    runs-on: [self-hosted, graffino, php8.2]

    environment: Production
    env:
      DCR: docker.io
      DCR_ORG: wkdelsw
      DCR_REPO: annotext
      DCR_TAG: latest
      ENVIRONMENT: production
      PHP_EXTENSIONS: ''
      VERSION_TAG: v1.0.0
      VERSION_NO: 1.0.0
      VERSION_MAJOR: 1
      VERSION_MINOR: 0
      TRAEFIK_HOSTNAME: ''

    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [22]

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
      issues: write
      pull-requests: write
      deployments: write
      actions: write

    steps:
      - name: Workflow Start - Teams Notification
        uses: Graffino/Graffino-Teams-Notification@v2
        if: always()
        with:
          github-token: '${{ github.token }}'
          ms-teams-webhook-uri: '${{ secrets.TEAMS_WEBHOOK_UPDATES }}'
          notification-summary: '${{ github.repository }} -> production by ${{ github.actor }} started...'
          timezone: Europe/Bucharest

      - name: Checkout
        id: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        if: success()

      - name: Replace environment variables
        uses: nightstory/replace-env@v2
        id: Create-Env
        env:
          COMPOSE_PROJECT_NAME: '${{ vars.COMPOSE_PROJECT_NAME }}'
          DCR: '${{ env.DCR }}'
          DCR_ORG: '${{ env.DCR_ORG }}'
          DCR_REPO: '${{ env.DCR_REPO }}'
          DCR_TAG: '${{ env.DCR_TAG }}'
          DB_HOSTNAME: '${{ secrets.DB_HOSTNAME }}'
          DB_DATABASE: '${{ secrets.DB_DATABASE }}'
          DB_USERNAME: '${{ secrets.DB_USERNAME }}'
          DB_PASSWORD: '${{ secrets.DB_PASSWORD }}'
          TRAEFIK_HOSTNAME: '${{ vars.TRAEFIK_HOSTNAME }}'
          DOCKERHUB_USERNAME: '${{ secrets.DOCKERHUB_USERNAME }}'
          DOCKERHUB_TOKEN: '${{ secrets.DOCKERHUB_TOKEN }}'
        with:
          input_file: .env.${{ env.ENVIRONMENT }}
          output_file: .env
          pattern: double_underscore

      - name: Copy .env file
        run: |
          rm -f .env.${{ env.ENVIRONMENT }}
          cp -f .env .env.${{ env.ENVIRONMENT }}

      - name: Load .env variables
        id: Load-Env
        uses: ahmadnassri/action-dotenv@v1

      - name: Get version
        id: Get-Version
        run: |
          VERSION_TAG=$(git describe --tags `git rev-list --tags --max-count=1` || echo "v1.0.0")
          echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV
          VERSION_NO=${VERSION_TAG#v}
          echo "VERSION_NO=$VERSION_NO" >> $GITHUB_ENV
          VERSION_MAJOR=$(echo $VERSION_NO | cut -d. -f1)
          echo "VERSION_MAJOR=$VERSION_MAJOR" >> $GITHUB_ENV
          VERSION_MINOR=$(echo $VERSION_NO | cut -d. -f2)
          echo "VERSION_MINOR=$VERSION_MINOR" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        id: Login-To-Container-Registry
        uses: docker/login-action@v3
        with:
          registry: '${{ env.DCR }}'
          username: '${{ secrets.DOCKERHUB_USERNAME }}'
          password: '${{ secrets.DOCKERHUB_TOKEN }}'

      - name: Build and push PHP-FPM image
        uses: docker/build-push-action@v6
        id: Build-And-Push-PHP-FPM
        if: success()
        with:
          context: .
          build-args: |
            ENVIRONMENT=${{ env.ENVIRONMENT }}
            PHP_EXTENSIONS=${{ env.PHP_EXTENSIONS }}
            TRAEFIK_HOSTNAME=${{ vars.TRAEFIK_HOSTNAME }}
            DOCKERHUB_TOKEN=${{ secrets.DOCKERHUB_TOKEN }}
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
          file: .docker/php/Dockerfile.production
          push: true
          tags: |
            ${{ env.DCR }}/${{ env.DCR_ORG }}/${{ env.DCR_REPO }}-php-fpm:${{ env.DCR_TAG }}
            ${{ env.DCR }}/${{ env.DCR_ORG }}/${{ env.DCR_REPO }}-php-fpm:${{ env.VERSION_NO }}
            ${{ env.DCR }}/${{ env.DCR_ORG }}/${{ env.DCR_REPO }}-php-fpm:${{ env.VERSION_MAJOR }}
            ${{ env.DCR }}/${{ env.DCR_ORG }}/${{ env.DCR_REPO }}-php-fpm:${{ env.VERSION_MAJOR }}.${{ env.VERSION_MINOR }}
          cache-from: >-
            type=registry,ref=${{ env.DCR }}/${{ env.DCR_ORG }}/${{ env.DCR_REPO }}-php-fpm:${{ env.DCR_TAG }}
          cache-to: type=inline

      - name: Build and push Nginx image
        uses: docker/build-push-action@v6
        id: Build-And-Push-Nginx
        if: success()
        with:
          context: .
          build-args: |
            ENVIRONMENT=${{ env.ENVIRONMENT }}
          file: .docker/nginx/Dockerfile
          push: true
          tags: |
            ${{ env.DCR }}/${{ env.DCR_ORG }}/${{ env.DCR_REPO }}-nginx:${{ env.DCR_TAG }}
            ${{ env.DCR }}/${{ env.DCR_ORG }}/${{ env.DCR_REPO }}-nginx:${{ env.VERSION_NO }}
            ${{ env.DCR }}/${{ env.DCR_ORG }}/${{ env.DCR_REPO }}-nginx:${{ env.VERSION_MAJOR }}
            ${{ env.DCR }}/${{ env.DCR_ORG }}/${{ env.DCR_REPO }}-nginx:${{ env.VERSION_MAJOR }}.${{ env.VERSION_MINOR }}
          cache-from: >
            type=registry,ref=${{ env.DCR }}/${{ env.DCR_ORG }}/${{ env.DCR_REPO }}-nginx:${{ env.DCR_TAG }}
          cache-to: type=inline

      - name: Build and push MariaDB image
        uses: docker/build-push-action@v6
        id: Build-And-Push-MariaDB
        if: success()
        with:
          context: .
          build-args: |
            ENVIRONMENT=${{ env.ENVIRONMENT }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_DATABASE=${{ secrets.DB_DATABASE }}
          file: .docker/mariadb/Dockerfile
          push: true
          tags: |
            ${{ env.DCR }}/${{ env.DCR_ORG }}/${{ env.DCR_REPO }}-mariadb:${{ env.DCR_TAG }}
            ${{ env.DCR }}/${{ env.DCR_ORG }}/${{ env.DCR_REPO }}-mariadb:${{ env.VERSION_NO }}
            ${{ env.DCR }}/${{ env.DCR_ORG }}/${{ env.DCR_REPO }}-mariadb:${{ env.VERSION_MAJOR }}
            ${{ env.DCR }}/${{ env.DCR_ORG }}/${{ env.DCR_REPO }}-mariadb:${{ env.VERSION_MAJOR }}.${{ env.VERSION_MINOR }}
          cache-from: >-
            type=registry,ref=${{ env.DCR }}/${{ env.DCR_ORG }}/${{ env.DCR_REPO }}-mariadb:${{ env.DCR_TAG }}
          cache-to: type=inline

      - name: Build and push ClamAV image
        uses: docker/build-push-action@v6
        if: success()
        with:
          context: .
          build-args: |
            ENVIRONMENT=${{ env.ENVIRONMENT }}
          file: .docker/clamav/Dockerfile
          push: true
          tags: |
            ${{ env.DCR }}/${{ env.DCR_ORG }}/${{ env.DCR_REPO }}-clamav:${{ env.DCR_TAG }}
            ${{ env.DCR }}/${{ env.DCR_ORG }}/${{ env.DCR_REPO }}-clamav:${{ env.VERSION_NO }}
            ${{ env.DCR }}/${{ env.DCR_ORG }}/${{ env.DCR_REPO }}-clamav:${{ env.VERSION_MAJOR }}
            ${{ env.DCR }}/${{ env.DCR_ORG }}/${{ env.DCR_REPO }}-clamav:${{ env.VERSION_MAJOR }}.${{ env.VERSION_MINOR }}
          cache-from: >
            type=registry,ref=${{ env.DCR }}/${{ env.DCR_ORG }}/${{ env.DCR_REPO }}-clamav:${{ env.DCR_TAG }}
          cache-to: type=inline

      - name: Clean up old packages
        uses: WPMedia/delete-github-package-versions@v0.4.10
        id: Clean-Up-Old-Packages
        if: success()
        with:
          keep: 3
          names: |
            ${{ env.DCR_REPO }}-php-fpm:${{ env.DCR_TAG }}
            ${{ env.DCR_REPO }}-nginx:${{ env.DCR_TAG }}
            ${{ env.DCR_REPO }}-mariadb:${{ env.DCR_TAG }}
            ${{ env.DCR_REPO }}-clamav:${{ env.DCR_TAG }}

      - name: Deploy
        uses: up9cloud/action-rsync@v1
        id: Deploy-To-Production
        if: success()
        env:
          HOST: ${{ secrets.DEPLOY_HOSTNAME }}
          USER: ${{ secrets.DEPLOY_USERNAME }}
          KEY: ${{ secrets.DEPLOY_SSH_KEY }}
          SSH_ARGS: ' -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'

          SOURCE: ./
          TARGET: ~/docker/${{ vars.COMPOSE_PROJECT_NAME }}/

          VERBOSE: true
          ARGS: -carEzhvP --delete-before --exclude-from='.rsync-excludes-${{ env.ENVIRONMENT }}'

          PRE_SCRIPT: |
            echo "Pre script start at: " $(date -u)
            mkdir -p ~/docker/${{ vars.COMPOSE_PROJECT_NAME }}
            echo "Pre script stop at: " $(date -u)

          POST_SCRIPT: |
            echo "Post script start at: " $(date -u)
            cd ~/docker/${{ vars.COMPOSE_PROJECT_NAME }}/
            ./.docker/setup-env.sh
            make update
            echo "Post stopped start at: " $(date -u)

      - name: Delete old workflow runs
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const workflowId = 'production.yml';
            const { owner, repo } = context.repo;
            const { data: { workflow_runs } } = await github.rest.actions.listWorkflowRuns({
              owner, repo, workflow_id: workflowId
            });
            const runsToKeep = new Set([context.runId, ...workflow_runs
              .sort((a, b) => b.id - a.id)
              .slice(0, 4)
              .map(run => run.id)
            ]);
            for (const { id } of workflow_runs) {
              if (!runsToKeep.has(id)) {
                await github.rest.actions.deleteWorkflowRun({ owner, repo, run_id: id })
                  .then(() => console.log(`Deleted run ${id}`))
                  .catch(error => console.error(`Failed to delete run ${id}: ${error.message}`));
              }
            }

      - name: Workflow Ended - Teams Notification Message
        uses: Graffino/Graffino-Teams-Notification@v2
        if: always()
        with:
          github-token: '${{ github.token }}'
          ms-teams-webhook-uri: '${{ secrets.TEAMS_WEBHOOK_UPDATES }}'
          job: '${{ toJson(job) }}'
          timezone: Europe/Bucharest
          notification-summary: '${{ github.repository }} -> production by ${{ github.actor }} finished. Deployment URL: ${{ vars.TRAEFIK_HOSTNAME }}. Summary: ${{ job.status }}'
