services:
  # PHP-FPM
  php-fpm:
    restart: unless-stopped
    container_name: ${COMPOSE_PROJECT_NAME}-php-fpm
    image: ${DCR}/${DCR_ORG}/${DCR_REPO}-php-fpm:${DCR_TAG}
    tty: true
    environment:
      USER_ID: ${USER_ID}
      GROUP_ID: ${GROUP_ID}
      ENVIRONMENT: ${ENVIRONMENT}
    build:
      context: .
      dockerfile: .docker/php/Dockerfile.production
      args:
        USER_ID: ${USER_ID}
        GROUP_ID: ${GROUP_ID}
        ENVIRONMENT: ${ENVIRONMENT}
        PHP_EXTENSIONS: ${PHP_EXTENSIONS}
    volumes:
      - app:/var/www:rw
      - ./.env:/var/www/.env:ro
      - ./wordpress/uploads:/var/www/wordpress/uploads:rw
      - tmp:/tmp:rw
    networks:
      - servers
      - proxy
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'SCRIPT_NAME=/healthcheck.php',
          'SCRIPT_FILENAME=/tmp/healthcheck.php',
          'REQUEST_METHOD=GET',
          'cgi-fcgi',
          '-bind',
          '-connect 127.0.0.1:9000',
          '|| exit 1'
        ]
      interval: 30s
      timeout: 5s
      retries: 3
    depends_on:
      mariadb:
        condition: service_healthy
      clamav:
        condition: service_started
  # Nginx
  nginx:
    restart: unless-stopped
    container_name: ${COMPOSE_PROJECT_NAME}-nginx
    image: ${DCR}/${DCR_ORG}/${DCR_REPO}-nginx:${DCR_TAG}
    tty: true
    environment:
      USER_ID: ${USER_ID}
      GROUP_ID: ${GROUP_ID}
      ENVIRONMENT: ${ENVIRONMENT}
    build:
      context: .
      dockerfile: .docker/nginx/Dockerfile
      args:
        USER_ID: ${USER_ID}
        GROUP_ID: ${GROUP_ID}
        ENVIRONMENT: ${ENVIRONMENT}
    volumes:
      - app:/var/www:rw
      - ./.env:/var/www/.env:ro
      - ./wordpress/uploads:/var/www/wordpress/uploads:rw
    ports:
      - 8080:80
    networks:
      - servers
      - proxy
    healthcheck:
      test: ['CMD-SHELL', 'curl --fail http://127.0.0.1:80 || exit 1']
      interval: 30s
      timeout: 5s
      retries: 3
    depends_on:
      php-fpm:
        condition: service_healthy
    labels:
      - traefik.enable=true
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}.rule=Host(`${TRAEFIK_HOSTNAME}`)
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}.tls=true
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}.tls.certresolver=${TRAEFIK_RESOLVER}
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}.tls.domains[0].main=${TRAEFIK_HOSTNAME}
  # MariaDB
  mariadb:
    restart: unless-stopped
    container_name: ${COMPOSE_PROJECT_NAME}-mariadb
    image: ${DCR}/${DCR_ORG}/${DCR_REPO}-mariadb:${DCR_TAG}
    tty: true
    environment:
      USER_ID: ${USER_ID}
      GROUP_ID: ${GROUP_ID}
      ENVIRONMENT: ${ENVIRONMENT}
    build:
      context: .
      dockerfile: .docker/mariadb/Dockerfile
      args:
        USER_ID: ${USER_ID}
        GROUP_ID: ${GROUP_ID}
        ENVIRONMENT: ${ENVIRONMENT}
        DB_DATABASE: ${DB_DATABASE}
        DB_USERNAME: ${DB_USERNAME}
        DB_PASSWORD: ${DB_PASSWORD}
    volumes:
      - mariadb:/var/lib/mysql:rw
    networks:
      - servers
    healthcheck:
      test:
        ['CMD', 'mysqladmin', 'ping', '-u${DB_USERNAME}', '-p${DB_PASSWORD}']
      interval: 30s
      timeout: 5s
      retries: 3
  # MariaDB Auto-Backup Dump
  mariadb-backup:
    restart: unless-stopped
    container_name: ${COMPOSE_PROJECT_NAME}-backup
    image: fradelg/mysql-cron-backup
    environment:
      MYSQL_HOST: ${COMPOSE_PROJECT_NAME}-mariadb
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASS: ${DB_PASSWORD}
      MAX_BACKUPS: 15
      INIT_BACKUP: 1
      CRON_TIME: 0 23 * * *
      GZIP_LEVEL: 9
      MYSQLDUMP_OPTS: --no-tablespaces
    volumes:
      - ./wordpress/backups/:/backup
    networks:
      servers:
    depends_on:
      mariadb:
        condition: service_healthy
  # ClamAV Antivirus
  clamav:
    restart: unless-stopped
    container_name: ${COMPOSE_PROJECT_NAME}-clamav
    image: ${DCR}/${DCR_ORG}/${DCR_REPO}-clamav:${DCR_TAG}
    tty: true
    environment:
      USER_ID: ${USER_ID}
      GROUP_ID: ${GROUP_ID}
      ENVIRONMENT: ${ENVIRONMENT}
    build:
      context: .
      dockerfile: .docker/clamav/Dockerfile
      args:
        USER_ID: ${USER_ID}
        GROUP_ID: ${GROUP_ID}
        ENVIRONMENT: ${ENVIRONMENT}
    volumes:
      - clamav:/var/lib/clamav:rw
      - tmp:/tmp:rw
    networks:
      - servers
      - proxy
    healthcheck:
      test: ['CMD', 'clamdscan', '--ping', '3']
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 1m
# Networks
networks:
  servers:
    driver: bridge
  proxy:
    external: true
# Volumes
volumes:
  mariadb:
  app:
  clamav:
  tmp:
